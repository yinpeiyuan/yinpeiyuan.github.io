{"pages":[{"title":"","text":"Webpack App","link":"/vue_todo/index.html"},{"title":"有关于我","text":"目前就读于南通大学。 java的潜伏者，python的观望者，js的拥护者。 博客的文档配合视频讲解效果更佳哦！","link":"/about/index.html"},{"title":"","text":"!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"\",n(n.s=33)}([function(t,e,n){\"use strict\";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||\"\",r=t[3];if(!r)return n;if(e&&\"function\"==typeof btoa){var o=(a=r,\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+\" */\"),i=r.sources.map(function(t){return\"/*# sourceURL=\"+r.sourceRoot+t+\" */\"});return[n].concat(i).concat([o]).join(\"\\n\")}var a;return[n].join(\"\\n\")}(e,t);return e[2]?\"@media \"+e[2]+\"{\"+n+\"}\":n}).join(\"\")},e.i=function(t,n){\"string\"==typeof t&&(t=[[null,t,\"\"]]);for(var r={},o=0;o=0&&l.splice(e,1)}function m(t){var e=document.createElement(\"style\");if(void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return y(e,t.attrs),h(t,e),e}function y(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function g(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=\"function\"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=i}if(e.singleton){var a=u++;n=c||(c=m(e)),r=x.bind(null,n,a,!1),o=x.bind(null,n,a,!0)}else t.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=function(t){var e=document.createElement(\"link\");return void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),t.attrs.rel=\"stylesheet\",y(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+\" */\");var a=new Blob([r],{type:\"text/css\"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,e),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute(\"media\",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){v(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");(e=e||{}).attrs=\"object\"==typeof e.attrs?e.attrs:{},e.singleton||\"boolean\"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto=\"head\"),e.insertAt||(e.insertAt=\"bottom\");var n=p(t,e);return d(n,e),function(t){for(var r=[],o=0;o=0&&Math.floor(e)===e&&isFinite(t)}function p(t){return i(t)&&\"function\"==typeof t.then&&\"function\"==typeof t.catch}function h(t){return null==t?\"\":Array.isArray(t)||l(t)&&t.toString===u?JSON.stringify(t,null,2):String(t)}function v(t){var e=parseFloat(t);return isNaN(e)?t:e}function m(t,e){for(var n=Object.create(null),r=t.split(\",\"),o=0;o-1)return t.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function _(t,e){return b.call(t,e)}function x(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var w=/-(\\w)/g,C=x(function(t){return t.replace(w,function(t,e){return e?e.toUpperCase():\"\"})}),A=x(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),T=/\\B([A-Z])/g,O=x(function(t){return t.replace(T,\"-$1\").toLowerCase()});var I=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function $(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function j(t,e){for(var n in e)t[n]=e[n];return t}function k(t){for(var e={},n=0;n0,J=q&&q.indexOf(\"edge/\")>0,K=(q&&q.indexOf(\"android\"),q&&/iphone|ipad|ipod|ios/.test(q)||\"ios\"===G),tt=(q&&/chrome\\/\\d+/.test(q),q&&/phantomjs/.test(q),q&&q.match(/firefox\\/(\\d+)/)),et={}.watch,nt=!1;if(Q)try{var rt={};Object.defineProperty(rt,\"passive\",{get:function(){nt=!0}}),window.addEventListener(\"test-passive\",null,rt)}catch(t){}var ot=function(){return void 0===W&&(W=!Q&&!Z&&void 0!==t&&(t.process&&\"server\"===t.process.env.VUE_ENV)),W},it=Q&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function at(t){return\"function\"==typeof t&&/native code/.test(t.toString())}var st,ct=\"undefined\"!=typeof Symbol&&at(Symbol)&&\"undefined\"!=typeof Reflect&&at(Reflect.ownKeys);st=\"undefined\"!=typeof Set&&at(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ut=M,lt=0,ft=function(){this.id=lt++,this.subs=[]};ft.prototype.addSub=function(t){this.subs.push(t)},ft.prototype.removeSub=function(t){g(this.subs,t)},ft.prototype.depend=function(){ft.target&&ft.target.addDep(this)},ft.prototype.notify=function(){var t=this.subs.slice();for(var e=0,n=t.length;e-1)if(i&&!_(o,\"default\"))a=!1;else if(\"\"===a||a===O(t)){var c=Bt(String,o.type);(c1&&(e[r[0].trim()]=r[1].trim())}}),e});function Er(t){var e=Sr(t.style);return t.staticStyle?j(t.staticStyle,e):e}function Sr(t){return Array.isArray(t)?k(t):\"string\"==typeof t?Mr(t):t}var Nr,Lr=/^--/,Dr=/\\s*!important$/,Pr=function(t,e,n){if(Lr.test(e))t.style.setProperty(e,n);else if(Dr.test(n))t.style.setProperty(O(e),n.replace(Dr,\"\"),\"important\");else{var r=Rr(e);if(Array.isArray(n))for(var o=0,i=n.length;o-1?e.split(Fr).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=\" \"+(t.getAttribute(\"class\")||\"\")+\" \";n.indexOf(\" \"+e+\" \")-1?e.split(Fr).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute(\"class\");else{for(var n=\" \"+(t.getAttribute(\"class\")||\"\")+\" \",r=\" \"+e+\" \";n.indexOf(r)>=0;)n=n.replace(r,\" \");(n=n.trim())?t.setAttribute(\"class\",n):t.removeAttribute(\"class\")}}function Vr(t){if(t){if(\"object\"==typeof t){var e={};return!1!==t.css&&j(e,Qr(t.name||\"v\")),j(e,t),e}return\"string\"==typeof t?Qr(t):void 0}}var Qr=x(function(t){return{enterClass:t+\"-enter\",enterToClass:t+\"-enter-to\",enterActiveClass:t+\"-enter-active\",leaveClass:t+\"-leave\",leaveToClass:t+\"-leave-to\",leaveActiveClass:t+\"-leave-active\"}}),Zr=Q&&!X,Gr=\"transition\",qr=\"animation\",Yr=\"transition\",Xr=\"transitionend\",Jr=\"animation\",Kr=\"animationend\";Zr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Yr=\"WebkitTransition\",Xr=\"webkitTransitionEnd\"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Jr=\"WebkitAnimation\",Kr=\"webkitAnimationEnd\"));var to=Q?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function eo(t){to(function(){to(t)})}function no(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)=a&&u()};setTimeout(function(){c0&&(n=Gr,l=a,f=i.length):e===qr?u>0&&(n=qr,l=u,f=c.length):f=(n=(l=Math.max(a,u))>0?a>u?Gr:qr:null)?n===Gr?i.length:c.length:0,{type:n,timeout:l,propCount:f,hasTransform:n===Gr&&io.test(r[Yr+\"Property\"])}}function so(t,e){for(;t.length1}function ho(t,e){!0!==e.data.show&&uo(e)}var vo=function(t){var e,n,r={},c=t.modules,u=t.nodeOps;for(e=0;e","link":"/vue_todo/bundle.js"}],"posts":[{"title":"Html+Css的难点（一、浮动布局的原理以及消除浮动）","text":"视频教程：https://www.bilibili.com/video/av42968534 一、什么是浮动 在我们布局的时用到的一种技术，能够方便我们进行布局，通过让元素浮动，我们可以使元素在水平上左右移动，再通过margin属性调整位置 二、浮动的原理 使当前元素脱离标准流，相当于浮动起来一样，浮动的框可以左右移动，直至它的外边缘遇到包含框或者另一个浮动框的边缘 三、浮动的生成 使用css属性float：left/right/none 左浮动/右浮动/不浮动（默认） 四、浮动的影响 对附近的元素布局造成改变，使得布局混乱 浮动后的元素可以设置宽度和高度等，也就是说元素浮动后会变成块级元素，但我更倾向于说元素变成inline-block类型的元素，即同时拥有块级与行内元素的特征 因为浮动元素脱离了普通流，会出现一种高度坍塌的现象：原来的父容器高度是当前元素A撑开的，但是当A元素浮动后，脱离普通流浮动起来，那父容器的高度就坍塌 实例1234567891011121314151617181920212223242526272829&lt;style&gt;.a{ width: 40%; height:100px; background: blue;}.b{ width: 70%; height:100px; background: red;}.c{ width: 90%; height:120px; background: green;}.d{ width: 50%; height:100px; background: black; }&lt;/style&gt;&lt;body&gt; &lt;div class=\"a\"&gt;&lt;/div&gt; &lt;div class=\"b\"&gt;&lt;/div&gt; &lt;div class=\"c\"&gt;&lt;/div&gt; &lt;div class=\"d\"&gt;&lt;/div&gt;&lt;/body&gt; 给div.b添加float:left向左浮动的属性 div.b浮起来的，div.c马上占了div.b的位置。因为div.b已经不再标准流里。div.b其实就像鱼鳞一样飘起来了。 在div.b继续添加浮动元素div.g 12345678910111213141516171819202122232425262728293031323334353637&lt;style&gt;.a{ width: 40%; height:100px; background: blue;}.b{ width: 70%; height:100px; background: red;}.c{ float: left; width: 90%; height:120px; background: green;}.d{ width: 50%; height:100px; background: black; }.g{ float: left; width: 20%; height:100px; background: yellow; }&lt;/style&gt;&lt;body&gt; &lt;div class=\"a\"&gt;&lt;/div&gt; &lt;div class=\"b\"&gt;&lt;/div&gt; &lt;div class=\"g\"&gt;&lt;/div&gt; &lt;div class=\"c\"&gt;&lt;/div&gt; &lt;div class=\"d\"&gt;&lt;/div&gt;&lt;/body&gt; 原来的上下排布变成左右排布，原来的block属性变为类似inline-block 消除浮动 添加伪类before after 假如我有一个.container的div 12345678&lt;style&gt;.container::before,.container::after{ content:\" \"; display:block; clear:both}&lt;/style&gt;","link":"/2019/02/05/float/"},{"title":"github+hexo搭建博客(三、git的前世今生与github)","text":"廖雪峰的git教程 视频教程：https://www.bilibili.com/video/av42546107 一、git是什么 Git是分布式版本控制系统 版本控制是什么 git帮你管理旧版本 分布式和集中式 github 集中管理代码 二、git的安装 git的下载地址：https://git-scm.com/downloads 修改用户名和邮箱地址：git config --global user.name &quot;username&quot;git config --global user.email &quot;email&quot; 查看用户名和邮箱地址： git config user.namegit config user.email 三、创建 ssh key ssh与github 对称加密算法和非对称加密算法 创建 ssh-keygen -t rsa -C “youremail@example.com“在用户目录下会生成找到.ssh，里面有id_rsa和id_rsa.pub两个文件将公钥id_rsa.pub添加到github","link":"/2019/02/03/github-hexo搭建博客-三、git的前世今生与github/"},{"title":"github+hexo搭建博客(二、hexo初体验)","text":"视频教程：https://www.bilibili.com/video/av42219636/ 前期准备 下载node.js https://nodejs.org/en/ 测试：npm 安装淘宝镜像 npm install -g cnpm –registry=https://registry.npm.taobao.org cnpm -v 下载git https://git-scm.com/downloads 下载hexo https://hexo.io/zh-cn/ 安装： npm install hexo-cli -g 配置 win+R cmd 在你希望的盘里创建一个目录 例如F://blog cd F://blog hexo init npm install hexo server","link":"/2019/02/02/github-hexo搭建博客-二、hexo初体验/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/02/01/hello-world/"},{"title":"兼职管理平台系统","text":"github地址:https://github.com/yinpeiyuan/ParttimeSystem 技术选型 springboot +jquery +bootstrap 使用方法 导入sql Application.properties中配置的Mysql数据库用户名为root，密码123，若用户名密码不同，请自行修改 启动程序：执行springboot的main函数 登录注册注册 注册页面 第一个选择框这里可以选择注册人的类型。 注册完成后，可以直接选择登录。 登录页面 若该账户密码不正确则出现弹框： 用户不存在： 辅导员管理界面 添加学生信息 该界面可以对学生信息进行增加，修改，删除。若新增的学生未注册，则显示未注册。 若学生已经注册，且进行过兼职，则可以点击历史兼职情况查看兼职。 点击新增即可添加一名学生 修改学生信息 删除 查看兼职信息 查看兼职 点击左侧的查看兼职即可查看兼职 ####删除兼职 若发布的兼职不符合规定，可以删除它。 介绍人管理辅导员可对兼职介绍人管理 只有被辅导员审核通过的才能发布兼职信息。 兼职介绍人发布兼职 该页面为发布的兼职历史信息，可以在该页面对兼职进行管理。 新增 点击新增按钮可发布兼职信息。 查看详情 查看兼职人员 点击变更状态可以选择是否同意学生兼职。 学生兼职状况 该页面显示的是学生已经申请的兼职。 查看详情点击查看详情 评价 可以为本次兼职进行评分。 查看兼职 在该页面可以查看所有被辅导员审核通过的兼职信息。","link":"/2019/02/03/parttimeSystem/"},{"title":"前端框架vue入门（四、v-if v-else-if v-else）","text":"v-if v-else-if v-else的使用 html 加入控制流判断 1234567891011121314151617&lt;body&gt; &lt;div id=\"a\"&gt; &lt;input type=\"text\" v-model=\"root\"&gt; &lt;div v-if=\"root=='admin'\"&gt; 管理员 &lt;/div&gt; &lt;div v-else-if=\"root=='hr'\"&gt; 人事 &lt;/div&gt; &lt;div v-else&gt; 普通用户 &lt;/div&gt; &lt;/div&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; main.js 1234567var app = new Vue({ el:\"#a\", data:{ root:'admin' } }) 显示：","link":"/2019/02/13/v-if v-else-if v-else的使用/"},{"title":"前端框架vue入门（五、v-model）","text":"v-model的使用的使用 v-model经常用于双向绑定数据 v-model.lazy 惰性更新 等到表单change才会改变数据 v-model.trim 删除表单两边的空格 v-model.number 将字符串转化为number v-model在表单控件上的使用 列1 html定义了一个单选框和复选框 12345678910111213141516171819202122&lt;body&gt; &lt;div id=\"a\"&gt; 男&lt;input type=\"radio\" v-model=\"sex\" value=\"male\"&gt; 女&lt;input type=\"radio\" v-model=\"sex\" value=\"female\"&gt; {{sex}} &lt;div style=\"margin-top:10px\"&gt; 篮球&lt;input type=\"checkbox\" v-model=\"hobbies\" value=\"basketball\"&gt; 足球&lt;input type=\"checkbox\" v-model=\"hobbies\" value=\"football\"&gt; {{hobbies}} &lt;/div&gt; &lt;/div&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt; &lt;/script&gt; &lt;/body&gt; main.js定义数据 12345678var app = new Vue({ el:\"#a\", data:{ sex:\"female\", hobbies:[] }}) 显示： 列2 html 定义了两个下拉框 1234567891011121314151617&lt;div style=\"margin-top:10px\"&gt; &lt;select v-model=\"like\"&gt;你喜欢谁 &lt;option value=\"1\"&gt;小明&lt;/option&gt; &lt;option value=\"2\"&gt;老王&lt;/option&gt; &lt;/select&gt; {{like}} &lt;/div&gt; &lt;div style=\"margin-top:10px\"&gt; &lt;select v-model=\"mul\" multiple&gt;你喜欢谁 &lt;option value=\"1\"&gt;小明&lt;/option&gt; &lt;option value=\"2\"&gt;老王&lt;/option&gt; &lt;option value=\"3\"&gt;夏利&lt;/option&gt; &lt;/select&gt; {{mul}} &lt;/div&gt; main.js 定义数据 显示：","link":"/2019/02/13/v-model的使用/"},{"title":"前端框架vue入门（十二、vue-router）","text":"vue-router的简单使用 v-router 在我看来v-router是用来完成单页应用的页面跳转 优势:1.页面不刷新，用户体验好 ​ 2.表单不提交，保留数据 ​ 3.逻辑结构清晰 快速体验 在html中，我们分别映入vue和vue-router以及我们的main.js 在作用域中我们用router-link定位连接 router-view显示页面 123456789101112131415&lt;body&gt; &lt;div id=\"a\"&gt; &lt;div&gt; &lt;router-link to=\"/\"&gt;首页&lt;/router-link&gt; &lt;router-link to=\"/about\"&gt;关于&lt;/router-link&gt; &lt;/div&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"../vue/vue-router.js\"&gt;&lt;/script&gt; &lt;script src=\"main.js\"&gt;&lt;/script&gt;&lt;/body&gt; main.js 在routes是我们定义的一个数组 里面包含两个连接以及对应的组件模版 然后传给vue-router vue-router 又作为参数传给vue 123456789101112131415161718192021222324252627var routes=[ { path:'/', component:{ template: ` &lt;h1&gt;首页欢迎您&lt;/h1&gt; ` } }, { path:'/about', component:{ template:` &lt;h1&gt;关于我的一些事&lt;/h1&gt; ` } }]var router =new VueRouter({ routes: routes})var app = new Vue({ el: \"#a\", router:router}) 演示 路由传参 演示 小明的显示小明的名字和年龄 小红的显示小红的名字和年龄 有两种方法获取值 第一种：$route.params 第二种： $route.query html 12 &lt;router-link to=\"/user/xiaoming?age=10\"&gt;小明的主页&lt;/router-link&gt;&lt;router-link to=\"/user/xiaohong?age=15\"&gt;小红的主页&lt;/router-link&gt; main.js 1234567891011{ path:'/user/:name', component:{ template:` &lt;div&gt; &lt;h1&gt;我叫{{$route.params.name}}&lt;/h1&gt; &lt;h1&gt;我今年{{$route.query.age}}&lt;/h1&gt; &lt;/div&gt; ` } } 子路由 在原有页面的基础在添加信息就可能要用到子路由chilren 演示 html 123456789101112131415161718192021{ path:'/user/:name', component:{ template:` &lt;div&gt; &lt;h1&gt;我叫{{$route.params.name}}&lt;/h1&gt; &lt;router-link to=\"more\" append&gt;查看更多&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; ` }, children:[{ path:\"more\", component:{ template:` &lt;div&gt;{{$route.params.name}}的更多信息&lt;/div&gt; ` } }] } html 不变","link":"/2019/02/19/v-router/"},{"title":"前端框架vue入门（八、vue-组件内部通信）","text":"vue的全局组件和局部组件 通信通俗来讲也就是传值 前面讲到组件是用来封装代码，提高代码复用性 代码封装变成组件就成为一个标签 父—-组件 子—-被封装代码 关键：props属性 父向子传值 父定义了msg=hello 在 子中引用 123456789101112131415&lt;body&gt; &lt;div id=\"a\"&gt; &lt;user msg='hello'&gt;&lt;/user&gt; &lt;/div&gt; &lt;template id=\"tpl\"&gt; &lt;div&gt; &lt;a :href=\"'/user/'+msg\"&gt;{{msg}}&lt;/a&gt; &lt;/div&gt; &lt;/template&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; main.js 12345678910111213Vue.component('user',{ template:\"#tpl\", props:['msg'], })var app = new Vue({ el:\"#a\", }) 结果父的msg：hello已经传到子的内容中 子向父传值 子向父传值就比较复杂 子利用$emit来触发事件 父组件则监听 this.$emit（’自定义事件名’,要传送的数据）； html 123456789101112131415161718192021222324252627282930313233&lt;body&gt; &lt;div id=\"a\"&gt; &lt;!-- 父子通信 --&gt; &lt;!-- &lt;user msg='hello'&gt;&lt;/user&gt; --&gt; &lt;!-- 子父通信 --&gt; &lt;fardiv&gt;&lt;/fardiv&gt; &lt;/div&gt; &lt;!-- &lt;template id=\"tpl\"&gt; &lt;div&gt; &lt;a :href=\"'/user/'+msg\"&gt;{{msg}}&lt;/a&gt; &lt;/div&gt; &lt;/template&gt; --&gt; &lt;template id=\"son\"&gt; &lt;div&gt; &lt;button @click=\"onclick\"&gt;爸爸，我要喝水 &lt;/button&gt; &lt;/div&gt; &lt;/template&gt; &lt;template id=\"far\"&gt; &lt;div&gt; &lt;sondiv @drink=\"drink\"&gt;&lt;/sondiv&gt; &lt;span v-if=\"condition\" &gt;给你喝水,儿子 ---{{msg}}&lt;/span&gt; &lt;/div&gt; &lt;/template&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; main.js 12345678910111213141516171819202122232425262728293031323334Vue.component('sondiv',{ template:\"#son\", methods: { onclick:function(){ this.$emit('drink','儿子喝饱了') } }, })Vue.component('fardiv',{ template:'#far', methods:{ drink(data){ this.condition=true this.msg=data } }, data() { return { condition:false, msg:\"\" } },})var app = new Vue({ el:\"#a\", }) 显示：","link":"/2019/02/15/vue-组件通信/"},{"title":"前端框架vue入门（一）","text":"vue系列第一弹 简单入门 前言 vue作为三大前端主流框架之一，帮助我们用更少的代码量开发出一个完整的项目。 特点：上手简单，代码规范 创建第一个vue应用 引入vue bootcdn下载vue https://www.bootcdn.cn/ 输入 vue 可以直接复制连接也可以下载下来 项目中引入 vue 创建main.js 使用vue 主html 加入id为a的p标签 利用vue的双向绑定 浏览器显示 双向绑定事例 注意点：将id作用域作用到整个div！ 123456789101112131415&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"a\"&gt; &lt;input type=\"text\" v-model=\"name\"&gt; &lt;p &gt;{{name}}&lt;/p&gt; &lt;/div&gt; &lt;script src=\"./vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./vue/main.js\"&gt;&lt;/script&gt;&lt;/body&gt; 在data中声明name 123456var app = new Vue({ el:&quot;#a&quot;, data:{ name:&quot;小明&quot; }}) 显示： 如果输入框为空 ,则隐藏p元素12345678910&lt;body&gt; &lt;div id=&quot;a&quot;&gt; &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt; &lt;p v-show=&quot;name&quot;&gt;v-show你的名字是：{{name}}&lt;/p&gt; &lt;p v-if=&quot;name&quot;&gt;v-if你的名字是：{{name}}&lt;/p&gt; &lt;/div&gt; &lt;script src=&quot;./vue/vue.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./vue/main.js&quot;&gt;&lt;/script&gt;&lt;/body&gt; v-show=“name” v-if=”name” v-show 仅仅是隐藏，而v-if是直接从dom中删除元素","link":"/2019/02/09/vue/"},{"title":"前端框架vue入门（三、v-on）","text":"vue系列第三弹 v-on的用法 v-on的使用方法 v-on 看名字就知道是事件绑定函数 vue对其进行了封装 和v-bind类似 可以用@代替v-on: 列1 main.js定义methods ，用来存放事件 123456789var app = new Vue({ el:\"#a\", methods:{ onclick:function(){ console.log(\"click\") } } }) html 里 使用v-on 对事件进行绑定 123456789&lt;body&gt; &lt;div id=\"a\"&gt; &lt;button v-on:click=\"onclick\"&gt;点我&lt;/button&gt; &lt;/div&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; 显示 列2 main.js 添加事件 123456789101112131415var app = new Vue({ el:\"#a\", methods:{ onclick:function(){ console.log(\"click\") }, onEnter:function(){ console.log(\"触碰\") }, onOut:function(){ console.log(\"离开\") } } }) html 添加button 1&lt;button v-on=\"{mouseenter:onEnter,mouseleave:onOut}\"&gt;触碰我&lt;/button&gt; 显示： 列3 阻止表单提交 123&lt;form @submit.prevent=\"onSubmit\"&gt; &lt;button type=\"submit\"&gt;提交&lt;/button&gt; &lt;/form&gt; 阻止表单冒泡 1@submit.stop 输入回车键的事件绑定 1&lt;input @keyup.enter=&quot;onEnter&quot; 详细代码 html 1234567891011121314&lt;body&gt; &lt;div id=\"a\"&gt; &lt;button v-on:click=\"onclick\"&gt;点我&lt;/button&gt; &lt;button v-on=\"{mouseenter:onEnter,mouseleave:onOut}\"&gt;触碰我&lt;/button&gt; &lt;form @submit.prevent=\"onSubmit\"&gt; &lt;input @keyup.enter=\"onEnter\" &gt; &lt;button type=\"submit\"&gt;提交&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; main.js 12345678910111213141516171819var app = new Vue({ el:\"#a\", methods:{ onclick:function(){ console.log(\"click\") }, onEnter:function(){ console.log(\"触碰\") }, onOut:function(){ console.log(\"离开\") }, onSubmit:function(){ console.log(\"提交\") } } }) 显示 输入a 然后回车","link":"/2019/02/12/vue3/"},{"title":"前端框架vue入门（二、v-for）","text":"vue系列第二弹 v-bind v-for的用法 v-for的使用 用于循环遍历 main.js 的代码 123456789101112131415161718var app = new Vue({ el:\"#a\", data:{ hobbies:[ {name:'basketball', cost:100 }, {name:'football', cost:90 }, {name:'volleyball', cost:80 } ] } }) 注意点 ：字符串两边的冒号别忘了加 html代码 1234567891011&lt;body&gt; &lt;div id=\"a\"&gt; &lt;ul&gt; &lt;li v-for=\"hobby in hobbies\"&gt;{{hobby.name}}的价格是{{hobby.cost}}&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script src=\"./vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./vue/main.js\"&gt;&lt;/script&gt;&lt;/body&gt; 显示效果： v-bind的使用 用于数据绑定 mian.js 定义数据 url 12345678var app = new Vue({ el:\"#a\", data:{ url:\"https://www.baidu.com\" } }) html 12345678&lt;body&gt; &lt;div id=\"a\"&gt; &lt;a v-bind:href=\"url\"&gt;点我&lt;/a&gt; &lt;/div&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; 如果url 里的数据改变 ，连接也会改变","link":"/2019/02/10/vue2/"},{"title":"前端框架vue入门（六、vue中computed属性）","text":"vue中computed属性 computed是vue中的计算属性 和methods不同，computed会留有缓存， methods中的方法每次执行都重新计算 列子 main.js引入computed属性 12345678910111213141516171819202122var app = new Vue({ el:\"#a\", data:{ Chinese:80, Maths: 60, English:70, }, computed: { sum: function(){ // 注意一定要this,否则找不到 //this.Chinese=this.Chinese==\"\"?0:this.Chinese; // this.Maths=this.Maths==\"\"?0:this.Maths; // this.English=this.English==\"\"?0:this.English; return this.Chinese+this.Maths+this.English }, average:function(){ return Math.round(this.sum/3) } }, }) Html主键一个table 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;body&gt; &lt;div id=\"a\"&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; 语文 &lt;/td&gt; &lt;td&gt; &lt;input type=\"text\" v-model.number=\"Chinese\"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt; 数学 &lt;/td&gt; &lt;td&gt; &lt;input type=\"text\" v-model.number=\"Maths\"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;英语&lt;/td&gt; &lt;td&gt; &lt;input type=\"text\" v-model.number=\"English\"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;总分&lt;/td&gt; &lt;td&gt;{{sum}}&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;平均分&lt;/td&gt; &lt;td&gt;{{average}}&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 演示 修改了一下computed的内容 当输入框没内容默认为0 1234567891011121314computed: { sum: function(){ // 注意一定要this,否则找不到 //this.Chinese=this.Chinese==\"\"?0:this.Chinese; // this.Maths=this.Maths==\"\"?0:this.Maths; // this.English=this.English==\"\"?0:this.English; return (this.Chinese==\"\"?0:this.Chinese) +(this.Maths==\"\"?0:this.Maths) +(this.English==\"\"?0:this.English) }, average:function(){ return Math.round(this.sum/3) } }, 演示:","link":"/2019/02/14/vue中computed属性/"},{"title":"前端框架vue入门（九、vue的平行组件之间通信以及过滤器的使用）","text":"vue的平行组件之间通信以及过滤器的使用 vue平行组件之间通信 场景：定义了两个组件 一个叫andy 一个叫bale andy负责发送 而bale 负责接收 列子 main.js 123456789101112131415161718192021222324252627282930313233343536373839var trans = new Vue();Vue.component(\"andy\",{ template: \"#andyTpl\", data() { return { andyMsg:'' } }, methods: { change(){ trans.$emit(\"andyMsgChange\",this.andyMsg) } },})Vue.component(\"bale\",{ template: \"#baleTpl\", data() { return { recMsg:'' } }, mounted(){ var ele = this; trans.$on(\"andyMsgChange\",function(data){ ele.recMsg = data }) } })var app = new Vue({ el:\"#a\", }) 简单解释一下 ： 定义trans作为事件响应者，负责事件的开启和监听 一旦andy的keyup事件触发 ，bale就接收到输入框的内容 html 12345678910111213141516171819&lt;body&gt; &lt;div id=\"a\"&gt; &lt;andy&gt;&lt;/andy&gt; &lt;bale&gt;&lt;/bale&gt; &lt;/div&gt; &lt;template id=\"andyTpl\"&gt; &lt;div&gt; &lt;input @keyup=\"change\" v-model=\"andyMsg\" type=\"text\"&gt; &lt;/div&gt; &lt;/template&gt; &lt;template id=\"baleTpl\"&gt; &lt;div&gt; &lt;span&gt;{{recMsg}}&lt;/span&gt; &lt;/div&gt; &lt;/template&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; 结果 vue中的过滤器 过滤器在vue中的意义在于修改数据传来的样式 场景：输入框的数据变成原来的一半，用过滤器完成 main.js 定义filter 12345678910Vue.filter('discount',function(val,){ return val*0.5})var app = new Vue({ el:\"#a\", data:{ price: '' } }) html 用|来分割data和filter 1234567891011&lt;body&gt; &lt;div id=\"a\"&gt; 所有水果打5折&lt;br&gt; &lt;input type=\"text\" v-model=\"price\"&gt;&lt;br&gt; 打完折后：{{price | discount}} &lt;/div&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; 结果","link":"/2019/02/16/vue平行组件之间通信/"},{"title":"前端框架vue入门（十一、vue中的mixins和solt）","text":"vue中的mixins和solt vue中的mixins mixins意思为混合 在我看来mixins的作用是用来解决代码重复的问题 将重复的代码定义在同一块地方 main.js 在main.js中我将两个component代码 定义在了total中 在两个component中分别用mixins引用 1234567891011121314151617181920212223242526272829303132333435var total={ methods:{ toggle(){ this.visible=!this.visible }, show(){ this.visible=true; }, hide(){ this.visible=false; } }, data() { return { visible:false } },}Vue.component('mouse',{ template:\"#mouseTpl\", mixins:[total]})Vue.component(\"pop\",{ template:'#popTpl', mixins:[total]})var app = new Vue({ el:\"#a\", }) html 123456789101112131415161718192021222324&lt;body&gt; &lt;div id=\"a\"&gt; &lt;pop&gt;&lt;/pop&gt; &lt;mouse&gt;&lt;/mouse&gt; &lt;/div&gt; &lt;template id=\"popTpl\"&gt; &lt;div&gt; &lt;button @click=\"toggle\" &gt;打招呼&lt;/button&gt; &lt;p v-if=\"visible\"&gt; 哈喽，我出现了&lt;br&gt; Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quam ullam vel distinctio? Laboriosam officiis hic aliquam saepe mollitia magni sint minima, ullam aspernatur a qui beatae dignissimos labore cum veritatis! &lt;/p&gt; &lt;/div&gt; &lt;/template&gt;&lt;template id=\"mouseTpl\"&gt; &lt;div&gt; &lt;span @mouseenter=\"show\" @mouseleave=\"hide\" style=\"background:skyblue\" &gt;碰我啊&lt;/span&gt; &lt;span v-if=\"visible\"&gt;hi。你好&lt;/span&gt; &lt;/div&gt;&lt;/template&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; 演示： 功能上并没有变简单，只是代码的重用变高了 如果想修改一些值，只要在原有的component重新定义一下就行 重新定义的会覆盖mixins vue中的slot slot 是插槽 在我看来，他的用法就是 在引用相同组件的时候 定义不同的不同的部分 html html 定义了两个相同的组件 在组件中引用不同的内容 关键： 之后你再主div引入时加上slot=”slot名字”就行 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;style&gt; .box{ max-width: 300px; border: 1px solid black; margin-bottom:10px; } .box .title{ border-bottom: 1px solid black; } .box .container{ border-bottom: 1px solid black; } &lt;/style&gt;&lt;body&gt; &lt;div id=\"a\"&gt; &lt;titdiv&gt; &lt;div slot=\"title\"&gt; 哈喽 &lt;/div&gt; &lt;/titdiv&gt; &lt;titdiv&gt; &lt;div slot=\"title\"&gt; 我不好 &lt;/div&gt; &lt;/titdiv&gt; &lt;/div&gt; &lt;template id='tit'&gt; &lt;div class=\"box\"&gt; &lt;div class=\"title\"&gt; &lt;slot name=\"title\"&gt;&lt;/slot&gt; &lt;/div&gt; &lt;div class=\"container\"&gt; &lt;slot name=\"container\"&gt;lore&lt;/slot&gt; &lt;/div&gt; &lt;div class= \"footer\"&gt; &lt;slot name=\"footer\"&gt;也许明天&lt;/slot&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; main.js 1234567891011Vue.component('titdiv',{ template:'#tit'})var app = new Vue({ el:\"#a\", }) 演示","link":"/2019/02/17/vue中的mixins/"},{"title":"前端框架vue入门（七、vue的全局组件和局部组件）","text":"vue的全局组件和局部组件 定义组件的意义在与封装代码 代码的复用性更高 结构更加清晰 全局变量列子 main.js 中我定义a,a2两个域 全局组件template代表模版，methods代表方法 123456789101112131415161718// 全局组件Vue.component(&apos;love&apos;,{ template:&quot;&lt;button @click=&apos;onClick&apos;&gt;我喜欢&lt;/button&gt;&quot;, methods: { onClick:function(){ alert(&quot;love&quot;) } },})var app = new Vue({ el:&quot;#a&quot;, })var app = new Vue({ el:&apos;#a2&apos;}) html 中我引入 组件love 12345678910111213&lt;body&gt; &lt;div id=\"a\"&gt; &lt;love&gt;&lt;/love&gt; &lt;/div&gt; &lt;div id=\"a2\" style=\"margin-top: 20px\"&gt; &lt;love&gt;&lt;/love&gt; &lt;/div&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; 演示：两个域中的love组件都能触发 局部变量 局部变量定义在作用域内部 用components声明 列子 main.js 12345678910111213141516171819var app = new Vue({ el:\"#a\", // 局部变量 components:{ frank:{ template:\"&lt;button @click='onfrank'&gt;frank&lt;/button&gt;\", methods: { onfrank: function(){ alert('frank') } }, } } })var app = new Vue({ el:'#a2'}) html 12345678910&lt;div id=\"a\"&gt; &lt;love&gt;&lt;/love&gt; &lt;frank&gt;&lt;/frank&gt; &lt;/div&gt; &lt;div id=\"a2\" style=\"margin-top: 20px\"&gt; &lt;love&gt;&lt;/love&gt; &lt;frank&gt;&lt;/frank&gt; &lt;/div&gt; 演示：第一个域中的frank就有效，第二个域中的frank就报错","link":"/2019/02/15/vue的全局组件和局部组件/"},{"title":"前端框架vue入门（十、vue的自定义指令）","text":"vue的自定义指令 自定义指令的意义其实就是 能够自主定义带有一些功能的标签 场景：我需要定义一个指令完成以下功能： 点击div他就fix 再点击就static 通过自定义指令完成 演示： html 最后的span目的是变出下拉框 定义了自定义指令v-fix 123456789101112131415161718192021&lt;body&gt; &lt;div id=\"a\"&gt; &lt;div @click=\"div1.fix=!div1.fix\" v-fix=\"div1.fix\"&gt; Lorem, ipsum dolor sit amet consectetur adipisicing elit. &lt;/div&gt; &lt;div @click=\"div2.fix=!div2.fix\" v-fix=\"div2.fix\"&gt; Lorem ipsum dolor, sit amet consectetur adipisicing elit. &lt;/div&gt; &lt;span style=\"font-size:80px\"&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia, obcaecati? Possimus quia, pariatur voluptate reprehenderit expedita nobis amet! Exercitationem veritatis error aliquid recusandae velit assumenda incidunt debitis ipsum accusantium dolore. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia, obcaecati? Possimus quia, pariatur voluptate reprehenderit expedita nobis amet! Exercitationem veritatis error aliquid recusandae velit assumenda incidunt debitis ipsum accusantium dolore. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia, obcaecati? Possimus quia, pariatur voluptate reprehenderit expedita nobis amet! Exercitationem veritatis error aliquid recusandae velit assumenda incidunt debitis ipsum accusantium dolore. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia, obcaecati? Possimus quia, pariatur voluptate reprehenderit expedita nobis amet! Exercitationem veritatis error aliquid recusandae velit assumenda incidunt debitis ipsum accusantium dolore. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia, obcaecati? Possimus quia, pariatur voluptate reprehenderit expedita nobis amet! Exercitationem veritatis error aliquid recusandae velit assumenda incidunt debitis ipsum accusantium dolore. &lt;/span&gt; &lt;/div&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; main.js Vue.directive(指令名,function(指令所在的整个元素,指令本身) 1234567891011121314151617181920212223Vue.directive(\"fix\",function(ele,binding){ var val = binding.value if(val){ ele.style.position='fixed', ele.style.top='10px', ele.style.left='10px' }else{ ele.style.position=\"static\" }})var app = new Vue({ el:\"#a\", data:{ div1: { fix: true }, div2:{ fix:false } } }) 列子2 在上面的基础上增加指令的修饰符 指令的修饰符 能动态的改变元素 使得更加灵活 .开头的元素 binding.modifiers获取:开头的元素 binding.arg main.js 1234567891011121314151617181920212223242526272829303132333435Vue.directive(\"fix\",function(ele,binding){ var val = binding.value; var positions = binding.modifiers; var warning = binding.arg; console.log(warning) if(val){ ele.style.position='fixed'; for (var key in positions ){ if(positions[key]){ ele.style[key]='20px' } } if(warning){ ele.style.background='yellow' } }else{ ele.style.position=\"static\" }})var app = new Vue({ el:\"#a\", data:{ div1: { fix: true }, div2:{ fix:false } } }) html 123456789101112131415161718192021&lt;body&gt; &lt;div id=\"a\"&gt; &lt;div @click=\"div1.fix=!div1.fix\" v-fix:ture.buttom.right=\"div1.fix\"&gt; Lorem, ipsum dolor sit amet consectetur adipisicing elit. &lt;/div&gt; &lt;div @click=\"div2.fix=!div2.fix\" v-fix=\"div2.fix\"&gt; Lorem ipsum dolor, sit amet consectetur adipisicing elit. &lt;/div&gt; &lt;span style=\"font-size:80px\"&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia, obcaecati? Possimus quia, pariatur voluptate reprehenderit expedita nobis amet! Exercitationem veritatis error aliquid recusandae velit assumenda incidunt debitis ipsum accusantium dolore. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia, obcaecati? Possimus quia, pariatur voluptate reprehenderit expedita nobis amet! Exercitationem veritatis error aliquid recusandae velit assumenda incidunt debitis ipsum accusantium dolore. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia, obcaecati? Possimus quia, pariatur voluptate reprehenderit expedita nobis amet! Exercitationem veritatis error aliquid recusandae velit assumenda incidunt debitis ipsum accusantium dolore. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia, obcaecati? Possimus quia, pariatur voluptate reprehenderit expedita nobis amet! Exercitationem veritatis error aliquid recusandae velit assumenda incidunt debitis ipsum accusantium dolore. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia, obcaecati? Possimus quia, pariatur voluptate reprehenderit expedita nobis amet! Exercitationem veritatis error aliquid recusandae velit assumenda incidunt debitis ipsum accusantium dolore. &lt;/span&gt; &lt;/div&gt; &lt;script src=\"../vue/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"./main.js\"&gt;&lt;/script&gt;&lt;/body&gt; 演示：","link":"/2019/02/16/v自定义指令/"},{"title":"利用github+hexo创建博客(一)","text":"视频教程：https://www.bilibili.com/video/av42128532/ 1.登陆github创建仓库 创建的仓库名就是以后的网址注意：仓库名必须是 ：你的github账户名字+.github.io 否则会有很多麻烦 2.创建博客页面 index.htmlhttps://topol.io/ 3.利用git或者github客户端上传博客页面https://desktop.github.com/ 1.clone到本地仓库 2.复制文件到本地仓库，一定要是index.html 3.提交，push","link":"/2019/02/02/利用github创建博客/"},{"title":"一些好用的工具推荐","text":"一些常用的工具推荐，列入百度云盘搜索引擎，wox，vscode的一些插件等 一、下载软件的工具 腾讯软件中心 https://pc.qq.com/ 推荐原因：一些需要翻墙的软件这里都能找到。 二、搜索百度云盘的地址 爱搜资源 https://www.aisouziyuan.com/ 特点：免费 云盘精灵 https://www.yunpanjingling.com/ 特点：付费，也不是很贵，搜索性能比较好 恶魔云盘 https://yunpanem.com/ 特点：免费 三、书写博客的神器Typora 网址 https://www.typora.io/ 使用教程 https://blog.csdn.net/SIMBA1949/article/details/79001226#fn: 特点：支持markdown语法，方便 一些简单的配置 配置图片保存的位置 file - preference 四、vscode一些好用的插件 方便代码的书写 ele 让代码不再枯燥 自动检测代码，方便代码的书写 将网页发布,方便html的编写 五、win下的搜索神器 wox 下载地址 http://www.wox.one/ 启动方式 alt+space 可修改","link":"/2019/02/09/一些好用的工具推荐/"},{"title":"复习数据结构与算法（一）","text":"数据结构中的逻辑结构与物理结构 一、逻辑结构 逻辑结构分为四种类型：集合结构，线性结构，树形结构，图形结构。 逻辑结构 集合结构 集合里面的元素没有任何关系，他们仅仅是在碰巧在一起 线性结构 线性结构中的数据元素之间是一对一的关系 树形结构 树形结构中的数据元素之间存在一对多的关系 图形结构 树形结构中的数据元素之间存在多对多的关系 我的理解：其实逻辑结构讲的是一个区域内元素之间的关系 重点：在于关系，或者说是联系 二、物理结构（存储结构） 物理结构又叫存储结构，分为四种，顺序存储结构、链式存储结构、索引结构、散列结构。 顺序存储结构 一段连续的内存空间。 优点：随机访问 缺点：插入删除效率低，大小固定 链式存储结构 不连续的内存空间 优点：大小动态扩展，插入删除效率高 缺点：不能随机访问。 索引存储结构 用结点的索引号来确定结点存储地址 优点：对顺序查找的一种改进，查找效率高 缺点：需额外空间存储索引表，增删可能需要重新建立索引 散列存储结构 以结点的关键字k为自变量，通过一个确定的函数关系f，计算出对应的函数值，吧这个函数值解释为结点的存储地址，将结点存入到f(k)所指示的存储位置上，在查找时再根据要查找的关键字，用同样的函数计算地址，然后到相应的单元中读取。散列法又被成为关键字——地址转换法。 优点：查找基于数据本身即可找到，查找效率高。存取 ​ 效率高 缺点： 可能存在多个数据元素存储在同一位置，引起地 ​ 址冲突。 举个例子： 你和父母的关系就可以看作是逻辑结构，你爸爸永远是你爸爸，你和你父母三人显然是一个多对多的关系，显然是一个图形结构。 而你和你父母可能住在一起又可能不住在一起，这种存储结构就可以看作物理结构。","link":"/2019/02/13/复习数据结构与算法（一）/"},{"title":"问题整理（java篇）","text":"持续更新 java中length,length(),size()区别 三个属性都是用来查看元素个数 针对的点不同 java中的length属性 针对数组 java中的length()方法 针对字符串String java中的size()方法 针对泛型集合 列子1234567891011121314151617public static void main(String[] args) {String []list={\"ma\",\"cao\",\"yuan\"};String a=\"macaoyuan\";System.out.println(list.length);System.out.println(a.length());List&lt;Object&gt; array=new ArrayList();array.add(a);System.out.println(array.size());}","link":"/2019/02/13/日常问题的思考/"}],"tags":[{"name":"Html","slug":"Html","link":"/tags/Html/"},{"name":"Css","slug":"Css","link":"/tags/Css/"},{"name":"github+hexo","slug":"github-hexo","link":"/tags/github-hexo/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"springboot","slug":"springboot","link":"/tags/springboot/"},{"name":"jqyery","slug":"jqyery","link":"/tags/jqyery/"},{"name":"bootstrap","slug":"bootstrap","link":"/tags/bootstrap/"},{"name":"Vue","slug":"Vue","link":"/tags/Vue/"},{"name":"工具","slug":"工具","link":"/tags/工具/"},{"name":"数据结构","slug":"数据结构","link":"/tags/数据结构/"},{"name":"java","slug":"java","link":"/tags/java/"}],"categories":[{"name":"Html","slug":"Html","link":"/categories/Html/"},{"name":"github+hexo","slug":"github-hexo","link":"/categories/github-hexo/"},{"name":"springboot","slug":"springboot","link":"/categories/springboot/"},{"name":"Vue","slug":"Vue","link":"/categories/Vue/"},{"name":"工具","slug":"工具","link":"/categories/工具/"},{"name":"数据结构","slug":"数据结构","link":"/categories/数据结构/"},{"name":"java","slug":"java","link":"/categories/java/"}]}